{"version":3,"sources":["../src/db.ts","../src/types.ts","../src/app.ts","../src/middlewares.ts"],"sourcesContent":["// TODO: Extract to library\nimport { customType } from 'drizzle-orm/pg-core';\nimport { drizzle as drizzleNeon } from 'drizzle-orm/neon-http';\nimport { drizzle as drizzlePostgres } from 'drizzle-orm/node-postgres';\nimport { type DrizzleConfig } from 'drizzle-orm';\nimport { Address, Uint, Int, Bytes } from './types';\nimport { Context } from 'hono';\nimport { Pool, escapeIdentifier } from 'pg';\n\nexport function extractSearchPathFromConnectionString(connectionString: string): string | null {\n\tif (!URL.canParse(connectionString)) {\n\t\treturn null;\n\t}\n\n\tconst url = new URL(connectionString);\n\tif (url.protocol !== 'postgres:') {\n\t\treturn null;\n\t}\n\n\tconst searchPathParam = url.searchParams.get('options');\n\tif (!searchPathParam) {\n\t\treturn null;\n\t}\n\n\tconst searchPathMatch = searchPathParam.match(/-c\\s+search_path=(.+?)(?:\\s+-c(?:\\s|$)|$)/i);\n\tif (searchPathMatch && searchPathMatch[1]) {\n\t\tconst rawSearchPath = searchPathMatch[1];\n\n\t\t// Split by comma and process each schema\n\t\tconst schemas = rawSearchPath.split(',').map((schema) => {\n\t\t\t// Trim whitespace\n\t\t\tconst trimmed = schema.trim();\n\t\t\t// Remove quotes if they exist\n\t\t\tconst unquoted = trimmed.replace(/^\"(.*)\"$/, '$1');\n\t\t\t// Escape the identifier\n\t\t\treturn escapeIdentifier(unquoted);\n\t\t});\n\n\t\treturn schemas.join(',');\n\t}\n\n\treturn null;\n}\n\ninterface ClientBindings {\n\tHYPERDRIVE?: {\n\t\tconnectionString: string;\n\t};\n\tDB_CONNECTION_STRING?: string;\n}\n\ninterface DbContext {\n\t__drizzleClients: Map<string, ReturnType<typeof drizzleNeon | typeof drizzlePostgres>>;\n\t__pools: Map<string, Pool>;\n}\n\nexport const client = <T extends { Bindings: ClientBindings }>(\n\tc: (Context<T> | { env: ClientBindings }) & Partial<DbContext>,\n\tconfig?: DrizzleConfig,\n) => {\n\tif (!c.env.DB_CONNECTION_STRING) {\n\t\tthrow new Error('Missing required environment variable: DB_CONNECTION_STRING');\n\t}\n\n\tlet connectionString = c.env.DB_CONNECTION_STRING;\n\tif (c.env.HYPERDRIVE?.connectionString) {\n\t\tconnectionString = c.env.HYPERDRIVE.connectionString;\n\t}\n\n\t// TODO: this is a bit hacky, but cloudflare workers does not seem to have a better way of interacting with state across the request.\n\t// We keep the drizzle clients and pools in the context so that we can reuse them across the same request and so that they are cleanup by the garbage collector\n\tlet drizzleClients = c.__drizzleClients;\n\tif (!drizzleClients) {\n\t\tdrizzleClients = new Map();\n\t\tc.__drizzleClients = drizzleClients;\n\t}\n\tlet pools = c.__pools;\n\tif (!pools) {\n\t\tpools = new Map();\n\t\tc.__pools = pools;\n\t}\n\n\t// Check if we already have a client for this connection string\n\tconst existingClient = drizzleClients.get(connectionString);\n\tif (existingClient) {\n\t\treturn existingClient;\n\t}\n\n\tlet dbClient: ReturnType<typeof drizzleNeon | typeof drizzlePostgres>;\n\tconst searchPath = extractSearchPathFromConnectionString(connectionString);\n\n\tif (searchPath) {\n\t\t// Reuse existing pool or create new one\n\t\tlet pool = pools.get(connectionString);\n\t\tif (!pool) {\n\t\t\tpool = new Pool({ connectionString, max: 4 });\n\t\t\tpool.on('connect', (client) => {\n\t\t\t\tclient.query(`SET search_path TO ${searchPath}`).catch((error) => {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.error('Failed to set search_path', error);\n\t\t\t\t});\n\t\t\t});\n\t\t\tpools.set(connectionString, pool);\n\t\t}\n\t\tdbClient = config ? drizzlePostgres(pool, config) : drizzlePostgres(pool);\n\t} else if (c.env.HYPERDRIVE?.connectionString) {\n\t\tdbClient = config ? drizzlePostgres(connectionString, config) : drizzlePostgres(connectionString);\n\t} else {\n\t\tdbClient = config ? drizzleNeon(connectionString, config) : drizzleNeon(connectionString);\n\t}\n\n\tdrizzleClients.set(connectionString, dbClient);\n\treturn dbClient;\n};\n\nexport const address = customType<{ data: Address; notNull: false; default: false }>({\n\tdataType() {\n\t\treturn 'bytea';\n\t},\n\ttoDriver(value) {\n\t\treturn value.address;\n\t},\n\tfromDriver(value: unknown) {\n\t\tif (!(value instanceof Buffer)) {\n\t\t\tthrow new Error('Expected Buffer for bytea type');\n\t\t}\n\t\treturn new Address(value);\n\t},\n});\n\nconst internalBytes = (width?: number) =>\n\tcustomType<{ data: Bytes; notNull: false; default: false }>({\n\t\tdataType() {\n\t\t\treturn 'bytea';\n\t\t},\n\t\ttoDriver(value) {\n\t\t\treturn value.data.subarray(0, width);\n\t\t},\n\t\tfromDriver(value: unknown) {\n\t\t\tif (!(value instanceof Buffer)) {\n\t\t\t\tthrow new Error('Expected Buffer for bytea type');\n\t\t\t}\n\t\t\treturn new Bytes(value.subarray(0, width));\n\t\t},\n\t});\n\nexport const bytes = internalBytes();\nexport const bytes1 = internalBytes(1);\nexport const bytes2 = internalBytes(2);\nexport const bytes3 = internalBytes(3);\nexport const bytes4 = internalBytes(4);\nexport const bytes5 = internalBytes(5);\nexport const bytes6 = internalBytes(6);\nexport const bytes7 = internalBytes(7);\nexport const bytes8 = internalBytes(8);\nexport const bytes9 = internalBytes(9);\nexport const bytes10 = internalBytes(10);\nexport const bytes11 = internalBytes(11);\nexport const bytes12 = internalBytes(12);\nexport const bytes13 = internalBytes(13);\nexport const bytes14 = internalBytes(14);\nexport const bytes15 = internalBytes(15);\nexport const bytes16 = internalBytes(16);\nexport const bytes17 = internalBytes(17);\nexport const bytes18 = internalBytes(18);\nexport const bytes19 = internalBytes(19);\nexport const bytes20 = internalBytes(20);\nexport const bytes21 = internalBytes(21);\nexport const bytes22 = internalBytes(22);\nexport const bytes23 = internalBytes(23);\nexport const bytes24 = internalBytes(24);\nexport const bytes25 = internalBytes(25);\nexport const bytes26 = internalBytes(26);\nexport const bytes27 = internalBytes(27);\nexport const bytes28 = internalBytes(28);\nexport const bytes29 = internalBytes(29);\nexport const bytes30 = internalBytes(30);\nexport const bytes31 = internalBytes(31);\nexport const bytes32 = internalBytes(32);\n\nconst uint = (width: number) =>\n\tcustomType<{ data: Uint; notNull: false; default: false }>({\n\t\tdataType() {\n\t\t\treturn 'numeric';\n\t\t},\n\t\ttoDriver(value) {\n\t\t\treturn value.value;\n\t\t},\n\t\tfromDriver(value: unknown) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\t// Base 10\n\t\t\t\treturn new Uint(BigInt(value));\n\t\t\t}\n\t\t\tthrow new Error('Invalid type for Uint: ' + typeof value);\n\t\t},\n\t});\n\nexport const uint8 = uint(8);\nexport const uint16 = uint(16);\nexport const uint24 = uint(24);\nexport const uint32 = uint(32);\nexport const uint40 = uint(40);\nexport const uint48 = uint(48);\nexport const uint56 = uint(56);\nexport const uint64 = uint(64);\nexport const uint72 = uint(72);\nexport const uint80 = uint(80);\nexport const uint88 = uint(88);\nexport const uint96 = uint(96);\nexport const uint104 = uint(104);\nexport const uint112 = uint(112);\nexport const uint120 = uint(120);\nexport const uint128 = uint(128);\nexport const uint136 = uint(136);\nexport const uint144 = uint(144);\nexport const uint152 = uint(152);\nexport const uint160 = uint(160);\nexport const uint256 = uint(256);\n\nconst int = (width: number) =>\n\tcustomType<{ data: Int; notNull: false; default: false }>({\n\t\tdataType() {\n\t\t\treturn 'numeric';\n\t\t},\n\t\ttoDriver(value) {\n\t\t\treturn value.value;\n\t\t},\n\t\tfromDriver(value: unknown) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\t// Base 10\n\t\t\t\treturn new Int(BigInt(value));\n\t\t\t}\n\t\t\tthrow new Error('Invalid type for Int: ' + typeof value);\n\t\t},\n\t});\n\nexport const int8 = int(8);\nexport const int16 = int(16);\nexport const int24 = int(24);\nexport const int32 = int(32);\nexport const int40 = int(40);\nexport const int48 = int(48);\nexport const int56 = int(56);\nexport const int64 = int(64);\nexport const int72 = int(72);\nexport const int80 = int(80);\nexport const int88 = int(88);\nexport const int96 = int(96);\nexport const int104 = int(104);\nexport const int112 = int(112);\nexport const int120 = int(120);\nexport const int128 = int(128);\nexport const int136 = int(136);\nexport const int144 = int(144);\nexport const int152 = int(152);\nexport const int160 = int(160);\nexport const int256 = int(256);\n\nexport const struct = <TData>(name: string) =>\n\tcustomType<{ data: TData; driverData: string }>({\n\t\tdataType() {\n\t\t\treturn 'jsonb';\n\t\t},\n\t\ttoDriver(value: TData): string {\n\t\t\treturn JSON.stringify(value);\n\t\t},\n\t})(name);\n","// TODO: Extract to library\n\nexport class Address {\n\taddress: Buffer;\n\n\tconstructor(address: Buffer) {\n\t\tthis.address = address;\n\t}\n\n\ttoJSON() {\n\t\t// TODO: Serialize with checksum\n\t\treturn '0x' + this.address.toString('hex');\n\t}\n\n\tstatic from(s: string): Address {\n\t\tif (s.startsWith('0x')) {\n\t\t\treturn new Address(Buffer.from(s.slice(2), 'hex'));\n\t\t}\n\t\treturn new Address(Buffer.from(s, 'hex'));\n\t}\n}\n\nexport class Bytes {\n\tdata: Buffer;\n\n\tconstructor(data: Buffer) {\n\t\tthis.data = data;\n\t}\n\n\ttoJSON() {\n\t\treturn '0x' + this.data.toString('hex');\n\t}\n\n\tstatic from(s: string): Bytes {\n\t\tif (s.startsWith('0x')) {\n\t\t\treturn new Bytes(Buffer.from(s.slice(2), 'hex'));\n\t\t}\n\t\treturn new Bytes(Buffer.from(s, 'hex'));\n\t}\n}\n\nexport class Uint {\n\tvalue: bigint;\n\n\tconstructor(value: bigint) {\n\t\tthis.value = value;\n\t}\n\n\ttoJSON() {\n\t\treturn this.value.toString(10);\n\t}\n}\n\nexport class Int {\n\tvalue: bigint;\n\n\tconstructor(value: bigint) {\n\t\tthis.value = value;\n\t}\n\n\ttoJSON() {\n\t\treturn this.value.toString(10);\n\t}\n}\n","import { Hono } from 'hono';\nimport { HonoOptions } from 'hono/hono-base';\n\n/**\n * Creates a new Hono application instance with the specified environment variables.\n */\nexport const create = <EnvVariables extends {}>(options?: HonoOptions<{ Bindings: EnvVariables }>) => {\n\treturn new Hono<{ Bindings: EnvVariables }>(options);\n};\n","import { Context } from 'hono';\n\nconst authHeaderName = 'X-IDX-AUTHENTICATED-API-KEY-NAME';\n\nexport const authentication = async (c: Context, next: () => Promise<void>): Promise<Response | void> => {\n\tconst isProduction = c.env?.NODE_ENV === 'production';\n\tif (!isProduction) {\n\t\treturn await next();\n\t}\n\n\tconst authHeader = c.req.header(authHeaderName);\n\tif (!authHeader) {\n\t\treturn Response.json({ unauthenticated: true }, { status: 401 });\n\t}\n\n\treturn await next();\n};\n"],"mappings":"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","names":["address","client"]}